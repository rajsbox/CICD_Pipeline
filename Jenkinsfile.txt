def COLOR_MAP = [
    'SUCCESS': 'good', 
    'FAILURE': 'danger',
]

pipeline {
    agent any
    tools {
        maven "MAVEN3.9.9"
        jdk "JDK17"
    }

    environment {
        DOCKER_IMAGE = 'my-java-webapp'
        CONTAINER_NAME = 'java-webapp'
        PORT_MAPPING = '8083:8080'
        NEXUS_URL = 'http://192.168.1.19:8081'
        REPOSITORY = 'T3000'
        GROUP_ID = 'SPPA'
        ARTIFACT_ID = 'WB'
        COMPONENT_VERSION = "INC${env.BUILD_ID}"  // Dynamically assign version based on the build ID
    }

    stages {
        stage('Fetch code') {
            steps {
                git branch: 'master', url: 'https://github.com/rajsbox/CICD_Pipeline.git'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean install -DskipTests'
            }
            post {
                success {
                    echo 'Now Archiving it...'
                    archiveArtifacts artifacts: '**/target/*.jar'
                }
            }
        }

        stage('UNIT TEST') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Checkstyle Analysis') {
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }

        stage("Sonar Code Analysis") {
            environment {
                scannerHome = tool 'Sonar6.2'
            }
            steps {
                withSonarQubeEnv('sonarserver') {
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                       -Dsonar.projectName=vprofile \
                       -Dsonar.projectVersion=1.0 \
                       -Dsonar.sources=src/ \
                       -Dsonar.java.binaries=target/classes \
                       -Dsonar.junit.reportsPath=target/surefire-reports/ \
                       -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                       -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage("UploadArtifact") {
            steps {
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: '192.168.1.19:8081',
                    groupId: 'SPPA',
                    version: "INC${env.BUILD_ID}",
                    repository: 'T3000',
                    credentialsId: 'nexuxID',
                    artifacts: [
                        [artifactId: 'WB',
                         classifier: '',
                         file: 'target/WB-1.0.jar',
                         type: 'jar']
                    ]
                )
            }
        }

        stage('Deploy to Docker') {
            steps {
                script {
                    echo 'Building and deploying the Docker image...'

                    def jarPath = "${GROUP_ID}/${ARTIFACT_ID}/${COMPONENT_VERSION}/${ARTIFACT_ID}-${COMPONENT_VERSION}.jar"
                    echo "Nexus JAR Path: ${jarPath}"

                    withCredentials([usernamePassword(credentialsId: 'nexuxID', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                        sh """
                            set -e
                            mkdir -p target
                            curl -u $NEXUS_USER:$NEXUS_PASS -O ${NEXUS_URL}/repository/${REPOSITORY}/${jarPath}
                            mv ${ARTIFACT_ID}-${COMPONENT_VERSION}.jar target/WB-1.0.jar
                        """
                    }

                    sh """
                        if ! docker --version; then
                            echo "Docker not found. Installing Docker..."
                            apt-get update
                            apt-get install -y docker.io
                        else
                            echo "Docker is already installed."
                        fi
                    """

                    sh "docker build -t $DOCKER_IMAGE --build-arg JAR_FILE=target/WB-1.0.jar ."

                    sh '''
                        docker stop $CONTAINER_NAME || true
                        docker rm $CONTAINER_NAME || true
                    '''

                    sh "docker run -d -p $PORT_MAPPING --name $CONTAINER_NAME $DOCKER_IMAGE"

                    sh 'docker rmi $(docker images -f "dangling=true" -q) || true'
                }
            }
        }
    }

    post {
        always {
            echo 'Slack Notifications.'
            slackSend channel: '#devops-cicd',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        }
    }
}
